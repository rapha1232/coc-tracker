datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String            @unique
  password        String
  playerTag       String?           @unique
  townHallLevel   Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  buildings       Building[]
  accounts        Account[]
  sessions        Session[]
  BuildingUpgrade BuildingUpgrade[]
  BuilderHut      BuilderHut[]
}

model Building {
  id              String            @id @default(cuid())
  name            String
  level           Int               @default(1)
  isGeared        Boolean           @default(false)
  category        String            @default("other")
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  BuildingUpgrade BuildingUpgrade[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BuilderHut {
  id       String            @id @default(cuid())
  userId   String
  user     User              @relation(fields: [userId], references: [id])
  level    Int
  upgrades BuildingUpgrade[]
}

model BuildingUpgrade {
  id         String      @id @default(cuid())
  buildingId String
  building   Building    @relation(fields: [buildingId], references: [id])
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  startTime  DateTime
  endTime    DateTime
  builderId  String? // Optional, assigned builder hut
  builder    BuilderHut? @relation(fields: [builderId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}
